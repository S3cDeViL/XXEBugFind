/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package bugfind.xxe;

import bugfind.sootadapters.MethodDefinition;
import java.util.List;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Raymond
 */
public class VulnerabilityMitigationItemTest {
    
    public VulnerabilityMitigationItemTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    /**
     * Test of getMethodDefinition method, of class VulnerabilityMitigationItem.
     */
    @Test
    public void testGetMethodDefinition() {
        System.out.println("getMethodDefinition");
        VulnerabilityMitigationItem instance = new VulnerabilityMitigationItem();
        MethodDefinition expResult = null;
        MethodDefinition result = instance.getMethodDefinition();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of getParameterValues method, of class VulnerabilityMitigationItem.
     */
    @Test
    public void testGetParameterValues() {
        System.out.println("getParameterValues");
        VulnerabilityMitigationItem instance = new VulnerabilityMitigationItem();
        List<MethodParameterValue> expResult = null;
        List<MethodParameterValue> result = instance.getParameterValues();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of getType method, of class VulnerabilityMitigationItem.
     */
    @Test
    public void testGetType() {
        System.out.println("getType");
        VulnerabilityMitigationItem instance = new VulnerabilityMitigationItem();
        String expResult = "";
        String result = instance.getType();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of setType method, of class VulnerabilityMitigationItem.
     */
    @Test
    public void testSetType() {
        System.out.println("setType");
        String type = "";
        VulnerabilityMitigationItem instance = new VulnerabilityMitigationItem();
        instance.setType(type);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of isLocalMitigation method, of class VulnerabilityMitigationItem.
     */
    @Test
    public void testIsLocalMitigation() {
        System.out.println("isLocalMitigation");
        VulnerabilityMitigationItem instance = new VulnerabilityMitigationItem();
        boolean expResult = false;
        boolean result = instance.isLocalMitigation();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of isFactoryMitigation method, of class VulnerabilityMitigationItem.
     */
    @Test
    public void testIsFactoryMitigation() {
        System.out.println("isFactoryMitigation");
        VulnerabilityMitigationItem instance = new VulnerabilityMitigationItem();
        boolean expResult = false;
        boolean result = instance.isFactoryMitigation();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of isGlobalMitigation method, of class VulnerabilityMitigationItem.
     */
    @Test
    public void testIsGlobalMitigation() {
        System.out.println("isGlobalMitigation");
        VulnerabilityMitigationItem instance = new VulnerabilityMitigationItem();
        boolean expResult = false;
        boolean result = instance.isGlobalMitigation();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of getSolutionDescription method, of class VulnerabilityMitigationItem.
     */
    @Test
    public void testGetSolutionDescription() {
        System.out.println("getSolutionDescription");
        VulnerabilityMitigationItem instance = new VulnerabilityMitigationItem();
        String expResult = "";
        String result = instance.getSolutionDescription();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of setSolutionDescription method, of class VulnerabilityMitigationItem.
     */
    @Test
    public void testSetSolutionDescription() {
        System.out.println("setSolutionDescription");
        String solutionDescription = "";
        VulnerabilityMitigationItem instance = new VulnerabilityMitigationItem();
        instance.setSolutionDescription(solutionDescription);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of getMitigationSpoilers method, of class VulnerabilityMitigationItem.
     */
    @Test
    public void testGetMitigationSpoilers() {
        System.out.println("getMitigationSpoilers");
        VulnerabilityMitigationItem instance = new VulnerabilityMitigationItem();
        List<MitigationSpoiler> expResult = null;
        List<MitigationSpoiler> result = instance.getMitigationSpoilers();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of addMitigationSpoiler method, of class VulnerabilityMitigationItem.
     */
    @Test
    public void testAddMitigationSpoiler() {
        System.out.println("addMitigationSpoiler");
        MitigationSpoiler ms = null;
        VulnerabilityMitigationItem instance = new VulnerabilityMitigationItem();
        boolean expResult = false;
        boolean result = instance.addMitigationSpoiler(ms);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }
    
}
